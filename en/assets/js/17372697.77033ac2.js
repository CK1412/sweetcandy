"use strict";(self.webpackChunksweetcandy=self.webpackChunksweetcandy||[]).push([[8894],{3905:(t,n,e)=>{e.d(n,{Zo:()=>u,kt:()=>f});var i=e(7294);function r(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}function o(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),e.push.apply(e,i)}return e}function c(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?o(Object(e),!0).forEach((function(n){r(t,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):o(Object(e)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))}return t}function a(t,n){if(null==t)return{};var e,i,r=function(t,n){if(null==t)return{};var e,i,r={},o=Object.keys(t);for(i=0;i<o.length;i++)e=o[i],n.indexOf(e)>=0||(r[e]=t[e]);return r}(t,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(i=0;i<o.length;i++)e=o[i],n.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(t,e)&&(r[e]=t[e])}return r}var s=i.createContext({}),l=function(t){var n=i.useContext(s),e=n;return t&&(e="function"==typeof t?t(n):c(c({},n),t)),e},u=function(t){var n=l(t.components);return i.createElement(s.Provider,{value:n},t.children)},p="mdxType",y={inlineCode:"code",wrapper:function(t){var n=t.children;return i.createElement(i.Fragment,{},n)}},d=i.forwardRef((function(t,n){var e=t.components,r=t.mdxType,o=t.originalType,s=t.parentName,u=a(t,["components","mdxType","originalType","parentName"]),p=l(e),d=r,f=p["".concat(s,".").concat(d)]||p[d]||y[d]||o;return e?i.createElement(f,c(c({ref:n},u),{},{components:e})):i.createElement(f,c({ref:n},u))}));function f(t,n){var e=arguments,r=n&&n.mdxType;if("string"==typeof t||r){var o=e.length,c=new Array(o);c[0]=d;var a={};for(var s in n)hasOwnProperty.call(n,s)&&(a[s]=n[s]);a.originalType=t,a[p]="string"==typeof t?t:r,c[1]=a;for(var l=2;l<o;l++)c[l]=e[l];return i.createElement.apply(null,c)}return i.createElement.apply(null,e)}d.displayName="MDXCreateElement"},9828:(t,n,e)=>{e.r(n),e.d(n,{assets:()=>s,contentTitle:()=>c,default:()=>y,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var i=e(7462),r=(e(7294),e(3905));const o={sidebar_position:1,title:"Check network connectivity"},c="Ki\u1ec3m tra k\u1ebft n\u1ed1i m\u1ea1ng",a={unversionedId:"flutter_dart/utils/useful/network_connectivity",id:"flutter_dart/utils/useful/network_connectivity",title:"Check network connectivity",description:"Class NetworkConnectivity gi\xfap ki\u1ec3m tra k\u1ebft n\u1ed1i m\u1ea1ng c\u1ee7a thi\u1ebft b\u1ecb.",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/flutter_dart/utils/useful/network_connectivity.mdx",sourceDirName:"flutter_dart/utils/useful",slug:"/flutter_dart/utils/useful/network_connectivity",permalink:"/en/docs/flutter_dart/utils/useful/network_connectivity",draft:!1,editUrl:"https://github.com/CK1412/sweetcandy/tree/main/docs/flutter_dart/utils/useful/network_connectivity.mdx",tags:[],version:"current",lastUpdatedBy:"canhth",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Check network connectivity"},sidebar:"flutterDart",previous:{title:"Useful",permalink:"/en/docs/category/useful"}},s={},l=[{value:"Code tri\u1ec3n khai",id:"code-tri\u1ec3n-khai",level:2},{value:"C\xe1ch s\u1eed d\u1ee5ng",id:"c\xe1ch-s\u1eed-d\u1ee5ng",level:2}],u={toc:l},p="wrapper";function y(t){let{components:n,...e}=t;return(0,r.kt)(p,(0,i.Z)({},u,e,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"ki\u1ec3m-tra-k\u1ebft-n\u1ed1i-m\u1ea1ng"},"Ki\u1ec3m tra k\u1ebft n\u1ed1i m\u1ea1ng"),(0,r.kt)("p",null,"Class ",(0,r.kt)("inlineCode",{parentName:"p"},"NetworkConnectivity")," gi\xfap ki\u1ec3m tra k\u1ebft n\u1ed1i m\u1ea1ng c\u1ee7a thi\u1ebft b\u1ecb."),(0,r.kt)("p",null,"Packages s\u1eed d\u1ee5ng:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://pub.dev/packages/connectivity_plus"},"connectivity_plus"),": ^4.0.2"),(0,r.kt)("li",{parentName:"ul"},"logger")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"NetworkConnectivity")," ch\u1ec9 ki\u1ec3m tra \u0111\u01b0\u1ee3c thi\u1ebft b\u1ecb \u0111\xe3 b\u1eadt k\u1ebft n\u1ed1i m\u1ea1ng hay ch\u01b0a, kh\xf4ng ki\u1ec3m tra \u0111\u01b0\u1ee3c t\xecnh tr\u1ea1ng m\u1ea1ng y\u1ebfu hay m\u1ea1nh.")),(0,r.kt)("h2",{id:"code-tri\u1ec3n-khai"},"Code tri\u1ec3n khai"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart",metastring:'title="network_connectivity.dart"',title:'"network_connectivity.dart"'},"import 'dart:async';\n\nimport 'package:connectivity_plus/connectivity_plus.dart';\nimport 'package:logger/logger.dart';\n\nclass NetworkConnectivity {\n  static final NetworkConnectivity instance = NetworkConnectivity._();\n  NetworkConnectivity._() {\n    _initConnectivity();\n    _connectivitySubscription =\n        _connectivity.onConnectivityChanged.listen(_updateConnectionStatus);\n  }\n\n  final Connectivity _connectivity = Connectivity();\n  late final StreamSubscription<ConnectivityResult> _connectivitySubscription;\n\n  ConnectionStatus? _status;\n  ConnectionStatus get status => _status ?? ConnectionStatus.offline;\n\n  void _initConnectivity() async {\n    try {\n      final connectivityResult = await _connectivity.checkConnectivity();\n      _updateConnectionStatus(connectivityResult);\n    } catch (e) {\n      Logger().e('Init Connectivity: $e');\n    }\n  }\n\n  void _updateConnectionStatus(ConnectivityResult connectivityResult) {\n    switch (connectivityResult) {\n      case ConnectivityResult.mobile:\n      case ConnectivityResult.wifi:\n      case ConnectivityResult.ethernet:\n        _status = ConnectionStatus.online;\n      default:\n        _status = ConnectionStatus.offline;\n    }\n  }\n\n  void dispose() {\n    _connectivitySubscription.cancel();\n  }\n}\n\nenum ConnectionStatus {\n  online,\n  offline,\n}\n\nextension ConnectionStatusEx on ConnectionStatus {\n  bool get isOnline => this == ConnectionStatus.online;\n  bool get isOffline => this == ConnectionStatus.offline;\n}\n")),(0,r.kt)("h2",{id:"c\xe1ch-s\u1eed-d\u1ee5ng"},"C\xe1ch s\u1eed d\u1ee5ng"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"/// Example\nif (NetworkConnectivity.instance.status.isOnline) {\n    debugPrint('Network is connected');\n  } else {\n    debugPrint('Network is disconnected');\n  }\n")))}y.isMDXComponent=!0}}]);